#!/usr/bin/env python

#   Copyright notice:
#   Copyright  Members of the EMI Collaboration, 2010.
# 
#   See www.eu-emi.eu for details on the copyright holders
# 
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
# 
#       http://www.apache.org/licenses/LICENSE-2.0
# 
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

from optparse import OptionParser
import sys
from sqlalchemy.exc import SQLAlchemyError
import json
from datetime import datetime

from MockedJobController import MockedJobController, request
from QueryCounter import QueryCounter
from util import *


def submit_job(files_number):
    job_controller = MockedJobController()

    files = []
    for f in xrange(files_number):
        files.append({
            'sources': ["gsiftp://source.se/path/file.%d" % f],
            'destinations': ["gsiftp://dest.se/path/file%d" % f]
        })
    request.method = 'PUT'
    request.body = json.dumps({'files': files})
    response = job_controller.submit()
    job_id = json.loads(response[0])['job_id']

    return job_id


def benchmark_cancel(files_number, callgraph_output):
    job_id = submit_job(files_number)

    job_controller = MockedJobController()
    cancel_method = job_controller.cancel
    if callgraph_output:
        cancel_method = ProfiledFunction(cancel_method)

    start = datetime.utcnow()
    cancel_method(job_id)
    end = datetime.utcnow()

    duration = end - start
    duration_seconds = duration.seconds + (duration.microseconds / 1000000.0)
    return duration, float(files_number) / duration_seconds


if __name__ == "__main__":
    opt_parser = OptionParser()
    opt_parser.add_option("-d", "--database", dest="database",
                          default="sqlite:////tmp/fts3_benchmark.db",
                          help="Database connection string")
    opt_parser.add_option("-f", "--files", dest="files_number", type="int",
                          default=100,
                          help="Number of files to send in a single job")
    opt_parser.add_option("--log-queries", dest="log_queries", action="store_true", default=False,
                          help="Enable verbose output of the queries generated by SqlAlchemy")
    opt_parser.add_option("--force", dest="force", action="store_true", default=False,
                          help="Forces the execution, skip the confirmation question")
    opt_parser.add_option("--callgraph", dest="callgraph", default=None,
                          help="Generated callgraph")
    (opts, args) = opt_parser.parse_args()

    log = setup_logging(opts.log_queries)

    try:
        log.info("Starting benchmark with %d files" % opts.files_number)
        log.warning("This will modify the database!")

        query_counter = QueryCounter()
        setup_database(opts.database, proxy=query_counter)

        if not opts.force:
            log.warning("Are you sure? (Type Yes)")
            if sys.stdin.readline().strip().lower() != "yes":
                log.critical("Aborted!")
                sys.exit(1)
        else:
            log.warning("--force specified, no confirmation required")

        total_time, files_per_sec = benchmark_cancel(opts.files_number, opts.callgraph)

        log.info("Total time:       %s" % total_time)
        log.info("Files per second: %.2f" % files_per_sec)
        log.info("Query count:")
        for (query, count) in query_counter:
            log.info("\t{0: <8}\t{1}".format(query, count))
    except SQLAlchemyError, e:
        log.error("SQLAlchemy error: " + str(e))
